{"ast":null,"code":"var _jsxFileName = \"/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotsPage() {\n  _s();\n  const botsUrl = \"http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true);\n  const sortStrategy = useRef({\n    health: 1,\n    damage: 1,\n    armor: 1\n  });\n  useEffect(() => {\n    fetch(botsUrl).then(response => response.json()).then(data => {\n      setBots(data);\n      setFilteredBots(data);\n    });\n  }, []);\n  function alreadyListedBot(bot) {\n    return Boolean(botsListed.find(botListed => botListed.id === bot.id));\n  }\n  function getBotsOfSameClass(bot) {\n    return botsListed.find(botListed => botListed.bot_class === bot.bot_class);\n  }\n  function deleteBot(botToDelete) {\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(response => response.json()).then(() => {\n      setBots(bots.filter(currentBot => currentBot.id !== botToDelete.id));\n      setBotsListed(botsListed.filter(botListed => botListed.id !== botToDelete.id));\n    });\n  }\n  function handleBotActionClick(bot, action) {\n    switch (action) {\n      case \"release-bot\":\n        deleteBot(bot);\n        break;\n      case \"enlist-bot\":\n        const listedBotsOfSameClass = getBotsOfSameClass(bot);\n        if (!listedBotsOfSameClass) {\n          setBotsListed([...botsListed, bot]);\n          setFilteredBots(filteredBots.filter(currentBot => currentBot.id !== bot.id));\n        } else {\n          alert(`${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`);\n        }\n        break;\n      case \"delist-bot\":\n        setBotsListed(botsListed.filter(currentBot => currentBot.id !== bot.id));\n        setFilteredBots([...filteredBots, bot]);\n        break;\n      case \"show-all-bots\":\n        setShowBotSpecs(null);\n        setShowSortBar(true);\n        break;\n      case \"show-bot-specs\":\n        setShowBotSpecs(bot);\n        setShowSortBar(false);\n        break;\n      default:\n        break;\n    }\n  }\n  function sortBots(data, sortBy) {\n    data.sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) {\n        return sortStrategy.current[sortBy] * 1;\n      } else if (a[sortBy] < b[sortBy]) {\n        return sortStrategy.current[sortBy] * -1;\n      } else {\n        return 0;\n      }\n    });\n    return data;\n  }\n  function updateSortStrategy(sortBy) {\n    sortStrategy.current[sortBy] *= -1;\n  }\n  function handleSortAction(sortBy) {\n    updateSortStrategy(sortBy);\n    setFilteredBots(sortBots([...filteredBots], sortBy));\n  }\n  function botsList(botsArray) {\n    return botsArray.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n      bot: bot,\n      handleBotActionClick: handleBotActionClick\n    }, bot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      botsListed: botsListed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), showSortBar && /*#__PURE__*/_jsxDEV(SortBar, {\n      handleSortAction: handleSortAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }, this), showBotSpecs ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: showBotSpecs,\n      handleBotActionClick: handleBotActionClick,\n      alreadyListedBot: alreadyListedBot(showBotSpecs)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(BotCollection, {\n      filteredBots: botsList(filteredBots)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(BotsPage, \"a1aSUc/446wQlPRQ//iq7l6Y4rA=\");\n_c = BotsPage;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YourBotArmy","BotCollection","BotCard","BotSpecs","SortBar","jsxDEV","_jsxDEV","BotsPage","_s","botsUrl","bots","setBots","botsListed","setBotsListed","showBotSpecs","setShowBotSpecs","filteredBots","setFilteredBots","showSortBar","setShowSortBar","sortStrategy","health","damage","armor","fetch","then","response","json","data","alreadyListedBot","bot","Boolean","find","botListed","id","getBotsOfSameClass","bot_class","deleteBot","botToDelete","method","headers","Accept","filter","currentBot","handleBotActionClick","action","listedBotsOfSameClass","alert","name","sortBots","sortBy","sort","a","b","current","updateSortStrategy","handleSortAction","botsList","botsArray","map","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\n\nfunction BotsPage() {\n  const botsUrl = \"http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true);\n  const sortStrategy = useRef({ health: 1, damage: 1, armor: 1 });\n\n  useEffect(() => {\n    fetch(botsUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        setBots(data);\n        setFilteredBots(data);\n      });\n  }, []);\n\n  function alreadyListedBot(bot) {\n    return Boolean(botsListed.find((botListed) => botListed.id === bot.id));\n  }\n\n  function getBotsOfSameClass(bot) {\n    return botsListed.find(\n      (botListed) => botListed.bot_class === bot.bot_class\n    );\n  }\n\n  function deleteBot(botToDelete) {\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then(() => {\n        setBots(bots.filter((currentBot) => currentBot.id !== botToDelete.id));\n        setBotsListed(\n          botsListed.filter((botListed) => botListed.id !== botToDelete.id)\n        );\n      });\n  }\n\n  function handleBotActionClick(bot, action) {\n    switch (action) {\n      case \"release-bot\":\n        deleteBot(bot);\n        break;\n\n      case \"enlist-bot\":\n        const listedBotsOfSameClass = getBotsOfSameClass(bot);\n        if (!listedBotsOfSameClass) {\n          setBotsListed([...botsListed, bot]);\n          setFilteredBots(\n            filteredBots.filter((currentBot) => currentBot.id !== bot.id)\n          );\n        } else {\n          alert(\n            `${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`\n          );\n        }\n        break;\n\n      case \"delist-bot\":\n        setBotsListed(\n          botsListed.filter((currentBot) => currentBot.id !== bot.id)\n        );\n        setFilteredBots([...filteredBots, bot]);\n        break;\n\n      case \"show-all-bots\":\n        setShowBotSpecs(null);\n        setShowSortBar(true);\n        break;\n\n      case \"show-bot-specs\":\n        setShowBotSpecs(bot);\n        setShowSortBar(false);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function sortBots(data, sortBy) {\n    data.sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) {\n        return sortStrategy.current[sortBy] * 1;\n      } else if (a[sortBy] < b[sortBy]) {\n        return sortStrategy.current[sortBy] * -1;\n      } else {\n        return 0;\n      }\n    });\n\n    return data;\n  }\n\n  function updateSortStrategy(sortBy) {\n    sortStrategy.current[sortBy] *= -1;\n  }\n\n  function handleSortAction(sortBy) {\n    updateSortStrategy(sortBy);\n    setFilteredBots(sortBots([...filteredBots], sortBy));\n  }\n\n  function botsList(botsArray) {\n    return botsArray.map((bot) => (\n      <BotCard\n        key={bot.id}\n        bot={bot}\n        handleBotActionClick={handleBotActionClick}\n      />\n    ));\n  }\n\n  return (\n    <div>\n      <YourBotArmy botsListed={botsListed} />\n      {showSortBar && <SortBar handleSortAction={handleSortAction} />}\n      {showBotSpecs ? (\n        <BotSpecs\n          bot={showBotSpecs}\n          handleBotActionClick={handleBotActionClick}\n          alreadyListedBot={alreadyListedBot(showBotSpecs)}\n        />\n      ) : (\n        <BotCollection filteredBots={botsList(filteredBots)} />\n      )}\n    </div>\n  );\n}\n\nexport default BotsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}