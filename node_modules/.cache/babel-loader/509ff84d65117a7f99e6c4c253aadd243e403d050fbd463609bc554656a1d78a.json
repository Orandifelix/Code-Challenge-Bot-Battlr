{"ast":null,"code":"var _jsxFileName = \"/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortPage from \"./SortPage\";\n\n// Check if a bot is already listed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction alreadyListedBot(bot, botsListed) {\n  return Boolean(botsListed.find(botListed => botListed.id === bot.id));\n}\n\n// Get bots of the same class\nfunction getBotsOfSameClass(bot, botsListed) {\n  return botsListed.find(botListed => botListed.bot_class === bot.bot_class);\n}\nfunction BotsPage() {\n  _s();\n  const botsUrl = \"http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true); // Initially visible\n  const sortStrategy = useRef({\n    health: 1,\n    damage: 1,\n    armor: 1\n  });\n\n  // Fetch Bots\n  useEffect(() => {\n    fetch(`${botsUrl}`).then(response => response.json()).then(data => {\n      setBots(data);\n      setFilteredBots(data);\n    });\n  }, []);\n\n  // Delete bot from server\n  function deleteBot(botToDelete) {\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(response => response.json()).then(() => {\n      setBots(bots.filter(currentBot => currentBot.id !== botToDelete.id));\n      setBotsListed(botsListed.filter(botListed => botListed.id !== botToDelete.id));\n    });\n  }\n\n  // Handler for Bot Actions\n\n  // Sorting Functionality\n  function sortBots(data, sortBy) {\n    data.sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) {\n        return sortStrategy.current[sortBy] * 1;\n      } else if (a[sortBy] < b[sortBy]) {\n        return sortStrategy.current[sortBy] * -1;\n      } else {\n        return 0;\n      }\n    });\n    return data;\n  }\n  function updateSortStrategy(sortBy) {\n    sortStrategy.current[sortBy] *= -1; // If it was ascending, make it descending and vice versa\n  }\n\n  function handleSortAction(sortBy) {\n    updateSortStrategy(sortBy);\n    setFilteredBots(sortBots([...filteredBots], sortBy));\n  }\n  function renderBotCards(botsArray) {\n    return botsArray.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n      bot: bot,\n      handleBotActionClick: handleBotActionClick\n    }, bot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      botsListed: renderBotCards(botsListed)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), showSortBar && /*#__PURE__*/_jsxDEV(SortPage, {\n      handleSortAction: handleSortAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 23\n    }, this), showBotSpecs ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: showBotSpecs,\n      handleBotActionClick: handleBotActionClick,\n      alreadyListedBot: alreadyListedBot(showBotSpecs, botsListed)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(BotCollection, {\n      filteredBots: renderBotCards(filteredBots)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(BotsPage, \"a1aSUc/446wQlPRQ//iq7l6Y4rA=\");\n_c = BotsPage;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YourBotArmy","BotCollection","BotCard","BotSpecs","SortPage","jsxDEV","_jsxDEV","alreadyListedBot","bot","botsListed","Boolean","find","botListed","id","getBotsOfSameClass","bot_class","BotsPage","_s","botsUrl","bots","setBots","setBotsListed","showBotSpecs","setShowBotSpecs","filteredBots","setFilteredBots","showSortBar","setShowSortBar","sortStrategy","health","damage","armor","fetch","then","response","json","data","deleteBot","botToDelete","method","headers","Accept","filter","currentBot","sortBots","sortBy","sort","a","b","current","updateSortStrategy","handleSortAction","renderBotCards","botsArray","map","handleBotActionClick","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortPage from \"./SortPage\";\n\n// Check if a bot is already listed\nfunction alreadyListedBot(bot, botsListed) {\n  return Boolean(botsListed.find((botListed) => botListed.id === bot.id));\n}\n\n// Get bots of the same class\nfunction getBotsOfSameClass(bot, botsListed) {\n  return botsListed.find((botListed) => botListed.bot_class === bot.bot_class);\n}\n\nfunction BotsPage() {\n  const botsUrl = \"http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true); // Initially visible\n  const sortStrategy = useRef({ health: 1, damage: 1, armor: 1 });\n\n  // Fetch Bots\n  useEffect(() => {\n    fetch(`${botsUrl}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setBots(data);\n        setFilteredBots(data);\n      });\n  }, []);\n\n  // Delete bot from server\n  function deleteBot(botToDelete) {\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then(() => {\n        setBots(bots.filter((currentBot) => currentBot.id !== botToDelete.id));\n        setBotsListed(\n          botsListed.filter((botListed) => botListed.id !== botToDelete.id)\n        );\n      });\n  }\n\n  // Handler for Bot Actions\n\n\n  // Sorting Functionality\n  function sortBots(data, sortBy) {\n    data.sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) {\n        return sortStrategy.current[sortBy] * 1;\n      } else if (a[sortBy] < b[sortBy]) {\n        return sortStrategy.current[sortBy] * -1;\n      } else {\n        return 0;\n      }\n    });\n\n    return data;\n  }\n\n  function updateSortStrategy(sortBy) {\n    sortStrategy.current[sortBy] *= -1; // If it was ascending, make it descending and vice versa\n  }\n\n  function handleSortAction(sortBy) {\n    updateSortStrategy(sortBy);\n    setFilteredBots(sortBots([...filteredBots], sortBy));\n  }\n\n  function renderBotCards(botsArray) {\n    return botsArray.map((bot) => (\n      <BotCard\n        key={bot.id}\n        bot={bot}\n        handleBotActionClick={handleBotActionClick}\n      />\n    ));\n  }\n\n  return (\n    <div>\n      <YourBotArmy botsListed={renderBotCards(botsListed)} />\n      {showSortBar && <SortPage handleSortAction={handleSortAction} />}\n      {showBotSpecs ? (\n        <BotSpecs\n          bot={showBotSpecs}\n          handleBotActionClick={handleBotActionClick}\n          alreadyListedBot={alreadyListedBot(showBotSpecs, botsListed)}\n        />\n      ) : (\n        <BotCollection filteredBots={renderBotCards(filteredBots)} />\n      )}\n    </div>\n  );\n}\n\nexport default BotsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,gBAAgBA,CAACC,GAAG,EAAEC,UAAU,EAAE;EACzC,OAAOC,OAAO,CAACD,UAAU,CAACE,IAAI,CAAEC,SAAS,IAAKA,SAAS,CAACC,EAAE,KAAKL,GAAG,CAACK,EAAE,CAAC,CAAC;AACzE;;AAEA;AACA,SAASC,kBAAkBA,CAACN,GAAG,EAAEC,UAAU,EAAE;EAC3C,OAAOA,UAAU,CAACE,IAAI,CAAEC,SAAS,IAAKA,SAAS,CAACG,SAAS,KAAKP,GAAG,CAACO,SAAS,CAAC;AAC9E;AAEA,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,OAAO,GAAG,4BAA4B;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,UAAU,EAAEY,aAAa,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC6B,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM+B,YAAY,GAAG7B,MAAM,CAAC;IAAE8B,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;;EAE/D;EACAjC,SAAS,CAAC,MAAM;IACdkC,KAAK,CAAE,GAAEd,OAAQ,EAAC,CAAC,CAChBe,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdhB,OAAO,CAACgB,IAAI,CAAC;MACbX,eAAe,CAACW,IAAI,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASC,SAASA,CAACC,WAAW,EAAE;IAC9BN,KAAK,CAAE,GAAEd,OAAQ,IAAGoB,WAAW,CAACzB,EAAG,EAAC,EAAE;MACpC0B,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,CACCR,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAC,MAAM;MACVb,OAAO,CAACD,IAAI,CAACuB,MAAM,CAAEC,UAAU,IAAKA,UAAU,CAAC9B,EAAE,KAAKyB,WAAW,CAACzB,EAAE,CAAC,CAAC;MACtEQ,aAAa,CACXZ,UAAU,CAACiC,MAAM,CAAE9B,SAAS,IAAKA,SAAS,CAACC,EAAE,KAAKyB,WAAW,CAACzB,EAAE,CAClE,CAAC;IACH,CAAC,CAAC;EACN;;EAEA;;EAGA;EACA,SAAS+B,QAAQA,CAACR,IAAI,EAAES,MAAM,EAAE;IAC9BT,IAAI,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAClB,IAAID,CAAC,CAACF,MAAM,CAAC,GAAGG,CAAC,CAACH,MAAM,CAAC,EAAE;QACzB,OAAOjB,YAAY,CAACqB,OAAO,CAACJ,MAAM,CAAC,GAAG,CAAC;MACzC,CAAC,MAAM,IAAIE,CAAC,CAACF,MAAM,CAAC,GAAGG,CAAC,CAACH,MAAM,CAAC,EAAE;QAChC,OAAOjB,YAAY,CAACqB,OAAO,CAACJ,MAAM,CAAC,GAAG,CAAC,CAAC;MAC1C,CAAC,MAAM;QACL,OAAO,CAAC;MACV;IACF,CAAC,CAAC;IAEF,OAAOT,IAAI;EACb;EAEA,SAASc,kBAAkBA,CAACL,MAAM,EAAE;IAClCjB,YAAY,CAACqB,OAAO,CAACJ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACtC;;EAEA,SAASM,gBAAgBA,CAACN,MAAM,EAAE;IAChCK,kBAAkB,CAACL,MAAM,CAAC;IAC1BpB,eAAe,CAACmB,QAAQ,CAAC,CAAC,GAAGpB,YAAY,CAAC,EAAEqB,MAAM,CAAC,CAAC;EACtD;EAEA,SAASO,cAAcA,CAACC,SAAS,EAAE;IACjC,OAAOA,SAAS,CAACC,GAAG,CAAE9C,GAAG,iBACvBF,OAAA,CAACJ,OAAO;MAENM,GAAG,EAAEA,GAAI;MACT+C,oBAAoB,EAAEA;IAAqB,GAFtC/C,GAAG,CAACK,EAAE;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGZ,CACF,CAAC;EACJ;EAEA,oBACErD,OAAA;IAAAsD,QAAA,gBACEtD,OAAA,CAACN,WAAW;MAACS,UAAU,EAAE2C,cAAc,CAAC3C,UAAU;IAAE;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACtDjC,WAAW,iBAAIpB,OAAA,CAACF,QAAQ;MAAC+C,gBAAgB,EAAEA;IAAiB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/DrC,YAAY,gBACXhB,OAAA,CAACH,QAAQ;MACPK,GAAG,EAAEc,YAAa;MAClBiC,oBAAoB,EAAEA,oBAAqB;MAC3ChD,gBAAgB,EAAEA,gBAAgB,CAACe,YAAY,EAAEb,UAAU;IAAE;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC,gBAEFrD,OAAA,CAACL,aAAa;MAACuB,YAAY,EAAE4B,cAAc,CAAC5B,YAAY;IAAE;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC7D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC1C,EAAA,CAzFQD,QAAQ;AAAA6C,EAAA,GAAR7C,QAAQ;AA2FjB,eAAeA,QAAQ;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}