{"ast":null,"code":"var _jsxFileName = \"/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotsPage() {\n  _s();\n  //start here with your code for step one\n\n  const [bots, setBots] = useState([]);\n  const [enlistedBots, setEnlistedBots] = useState([]);\n  const url = \"http://localhost:8002/bots\";\n  useEffect(() => {\n    // Fetching bots data from the backend\n    fetch(url).then(response => response.json()).then(data => setBots(data)).catch(error => console.log(error));\n  }, []);\n  function handleBotActionClick(bot, action) {\n    switch (action) {\n      case \"release-bot\":\n        deleteBot(bot);\n        break;\n      case \"enlist-bot\":\n        const listedBotsOfSameClass = getBotsOfSameClass(bot);\n        if (!listedBotsOfSameClass) {\n          setBotsListed([...botsListed, bot]);\n          setFilteredBots(filteredBots.filter(currentBot => currentBot.id !== bot.id));\n        } else {\n          alert(`${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`);\n        }\n        break;\n      case \"delist-bot\":\n        setBotsListed(botsListed.filter(currentBot => currentBot.id !== bot.id));\n        setFilteredBots([...filteredBots, bot]);\n        break;\n      case \"show-all-bots\":\n        setShowBotSpecs(null);\n        setShowSortBar(true);\n        break;\n      case \"show-bot-specs\":\n        setShowBotSpecs(bot);\n        setShowSortBar(false);\n    }\n  }\n  function deleteBot(botToDelete) {\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(response => response.json()).then(() => {\n      setBots(bots.filter(currentBot => currentBot.id !== botToDelete.id));\n      setBotsListed(botsListed.filter(botListed => botListed.id !== botToDelete.id));\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      enlistedBots: enlistedBots,\n      releaseBot: releaseBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      enlistBot: enlistBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(BotsPage, \"mePyinjWmuGOqgLLJcRecJpTmIw=\");\n_c = BotsPage;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","useEffect","YourBotArmy","BotCollection","jsxDEV","_jsxDEV","BotsPage","_s","bots","setBots","enlistedBots","setEnlistedBots","url","fetch","then","response","json","data","catch","error","console","log","handleBotActionClick","bot","action","deleteBot","listedBotsOfSameClass","getBotsOfSameClass","setBotsListed","botsListed","setFilteredBots","filteredBots","filter","currentBot","id","alert","name","bot_class","setShowBotSpecs","setShowSortBar","botToDelete","botsUrl","method","headers","Accept","botListed","children","releaseBot","fileName","_jsxFileName","lineNumber","columnNumber","enlistBot","_c","$RefreshReg$"],"sources":["/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n\nfunction BotsPage() {\n  //start here with your code for step one\n\n  const [bots, setBots] = useState([]);\n  const [enlistedBots, setEnlistedBots] = useState([]);\n  const url = \"http://localhost:8002/bots\";\n\n  useEffect(() => {\n    // Fetching bots data from the backend\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => setBots(data))\n      .catch((error) => console.log(error));\n  }, []);\n\n\n\n   function handleBotActionClick(bot, action) {\n     switch (action) {\n       case \"release-bot\":\n         deleteBot(bot);\n         break;\n\n       case \"enlist-bot\":\n         const listedBotsOfSameClass = getBotsOfSameClass(bot);\n         if (!listedBotsOfSameClass) {\n           setBotsListed([...botsListed, bot]);\n           setFilteredBots(\n             filteredBots.filter((currentBot) => currentBot.id !== bot.id)\n           );\n         } else {\n           alert(\n             `${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`\n           );\n         }\n         break;\n\n       case \"delist-bot\":\n         setBotsListed(\n           botsListed.filter((currentBot) => currentBot.id !== bot.id)\n         );\n         setFilteredBots([...filteredBots, bot]);\n         break;\n\n       case \"show-all-bots\":\n         setShowBotSpecs(null);\n         setShowSortBar(true);\n         break;\n\n       case \"show-bot-specs\":\n         setShowBotSpecs(bot);\n         setShowSortBar(false);\n     }\n   }\n\n\n\n\n  function deleteBot(botToDelete) {\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then(() => {\n        setBots(bots.filter((currentBot) => currentBot.id !== botToDelete.id));\n        setBotsListed(\n          botsListed.filter((botListed) => botListed.id !== botToDelete.id)\n        );\n      });\n  }\n\n  return (\n    <div>\n      <YourBotArmy enlistedBots={enlistedBots} releaseBot={releaseBot} />\n      <BotCollection bots={bots} enlistBot={enlistBot} />\n    </div>\n  );\n}\n\nexport default BotsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}