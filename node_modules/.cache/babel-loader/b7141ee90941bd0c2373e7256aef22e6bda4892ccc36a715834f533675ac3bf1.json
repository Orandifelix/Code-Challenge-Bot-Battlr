{"ast":null,"code":"var _jsxFileName = \"/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotsPage() {\n  _s();\n  //start here with your code for step one\n  const botsUrl = \" http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true); //Initially visible\n  const sortStrategy = useRef({\n    health: 1,\n    damage: 1,\n    armor: 1\n  });\n\n  //Fetch Bots\n  useEffect(() => {\n    fetch(`${botsUrl}`).then(response => response.json()).then(data => {\n      setBots(data);\n      setFilteredBots(data);\n    });\n  }, []);\n\n  //Check if a bot is already listed\n  function alreadyListedBot(bot) {\n    return Boolean(botsListed.find(botListed => botListed.id === bot.id));\n  }\n\n  //Get bots of the same class\n  function getBotsOfSameClass(bot) {\n    return botsListed.find(botListed => botListed.bot_class === bot.bot_class);\n  }\n\n  //Delete bot from server\n  function deleteBot(botToDelete) {\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(() => {\n      setBots(bots.filter(currentBot => currentBot.id !== botToDelete.id));\n      setBotsListed(botsListed.filter(botListed => botListed.id !== botToDelete.id));\n    });\n  }\n\n  //Handler for Bot Actions\n  function handleBotActionClick(bot, action) {\n    switch (action) {\n      case \"release-bot\":\n        deleteBot(bot);\n        break;\n      case \"enlist-bot\":\n        const listedBotsOfSameClass = getBotsOfSameClass(bot);\n        if (!listedBotsOfSameClass) {\n          setBotsListed([...botsListed, bot]);\n          setFilteredBots(filteredBots.filter(currentBot => currentBot.id !== bot.id));\n        } else {\n          alert(`${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`);\n        }\n        break;\n      case \"delist-bot\":\n        setBotsListed(botsListed.filter(currentBot => currentBot.id !== bot.id));\n        setFilteredBots([...filteredBots, bot]);\n        break;\n      case \"show-all-bots\":\n        setShowBotSpecs(null);\n        setShowSortBar(true);\n        break;\n      case \"show-bot-specs\":\n        setShowBotSpecs(bot);\n        setShowSortBar(false);\n    }\n  }\n\n  //Sorting Functionality\n  function sortBots(data, sortBy) {\n    data.sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) {\n        return sortStrategy.current[sortBy] * 1;\n      } else if (a[sortBy] < b[sortBy]) {\n        return sortStrategy.current[sortBy] * -1;\n      } else {\n        return 0;\n      }\n    });\n    return data;\n  }\n  function updateSortStrategy(sortBy) {\n    sortStrategy.current[sortBy] *= -1; //if it was ascending, make it descending and vice versa\n  }\n\n  function handleSortAction(sortBy) {\n    updateSortStrategy(sortBy);\n    setFilteredBots(sortBots([...filteredBots], sortBy));\n  }\n  function botsList(botsArray) {\n    return botsArray.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n      bot: bot,\n      handleBotActionClick: handleBotActionClick\n    }, bot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      botsListed: botsList(botsListed)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), showSortBar ? /*#__PURE__*/_jsxDEV(SortBar, {\n      handleSortAction: handleSortAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 71\n    }, this), showBotSpecs ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: showBotSpecs,\n      handleBotActionClick: handleBotActionClick,\n      alreadyListedBot: alreadyListedBot(showBotSpecs)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(BotCollection, {\n      filteredBots: botsList(filteredBots)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 151\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(BotsPage, \"a1aSUc/446wQlPRQ//iq7l6Y4rA=\");\n_c = BotsPage;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YourBotArmy","BotCollection","BotCard","BotSpecs","SortBar","jsxDEV","_jsxDEV","BotsPage","_s","botsUrl","bots","setBots","botsListed","setBotsListed","showBotSpecs","setShowBotSpecs","filteredBots","setFilteredBots","showSortBar","setShowSortBar","sortStrategy","health","damage","armor","fetch","then","response","json","data","alreadyListedBot","bot","Boolean","find","botListed","id","getBotsOfSameClass","bot_class","deleteBot","botToDelete","method","headers","filter","currentBot","handleBotActionClick","action","listedBotsOfSameClass","alert","name","sortBots","sortBy","sort","a","b","current","updateSortStrategy","handleSortAction","botsList","botsArray","map","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/home/orandi/Development/Code/Phase2/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421/code-challenge/src/components/BotsPage.js"],"sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\n\n\nfunction BotsPage() {\n  //start here with your code for step one\n  const botsUrl = \" http://localhost:8002/bots\";\n  const [bots, setBots] = useState([]);\n  const [botsListed, setBotsListed] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(null);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [showSortBar, setShowSortBar] = useState(true) //Initially visible\n  const sortStrategy = useRef({ health: 1, damage: 1, armor: 1 })\n\n  //Fetch Bots\n  useEffect(()=> {\n    fetch(`${botsUrl}`)\n    .then(response => response.json())\n    .then(data => {\n      setBots(data);\n      setFilteredBots(data);\n    });\n  }, [])\n\n  //Check if a bot is already listed\n  function alreadyListedBot(bot) {\n    return Boolean(botsListed.find(botListed => botListed.id === bot.id))\n  }\n\n  //Get bots of the same class\n  function getBotsOfSameClass (bot) {\n    return botsListed.find(botListed => botListed.bot_class === bot.bot_class)\n  }\n\n  //Delete bot from server\n  function deleteBot(botToDelete){\n    fetch(`${botsUrl}/${botToDelete.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n    .then(response => response.json())\n    .then(() => {\n      setBots(bots.filter(currentBot => currentBot.id !== botToDelete.id))\n      setBotsListed(botsListed.filter(botListed => botListed.id !== botToDelete.id))\n    })\n  }\n\n  //Handler for Bot Actions\n  function handleBotActionClick(bot, action){\n    switch(action){\n      case \"release-bot\":\n        deleteBot(bot)   \n        break;\n             \n      case \"enlist-bot\":\n        const listedBotsOfSameClass = getBotsOfSameClass(bot);\n        if(!listedBotsOfSameClass){\n          setBotsListed([...botsListed, bot])\n          setFilteredBots(filteredBots.filter(currentBot => currentBot.id !== bot.id))\n        } else {\n          alert(`${listedBotsOfSameClass.name} has already been enlisted for the ${bot.bot_class} role`)\n        }\n        break;\n\n      case \"delist-bot\":\n        setBotsListed(botsListed.filter(currentBot => currentBot.id !== bot.id))\n        setFilteredBots([...filteredBots, bot])\n        break;\n\n      case \"show-all-bots\":\n        setShowBotSpecs(null);\n        setShowSortBar(true)\n        break;\n  \n      case \"show-bot-specs\":\n        setShowBotSpecs(bot);\n        setShowSortBar(false);\n    }\n  }\n\n  //Sorting Functionality\n  function sortBots(data, sortBy){\n    data.sort((a, b) => {\n      if(a[sortBy] > b[sortBy]){\n        return sortStrategy.current[sortBy] * 1\n      }else if(a[sortBy] < b[sortBy]){\n        return sortStrategy.current[sortBy] * -1\n      } else {\n        return 0\n      }\n    })\n\n    return data\n  }\n\n\n  function updateSortStrategy(sortBy){\n    sortStrategy.current[sortBy] *= -1 //if it was ascending, make it descending and vice versa\n  }\n\n\n  function handleSortAction(sortBy){\n    updateSortStrategy(sortBy)\n    setFilteredBots(sortBots([...filteredBots], sortBy))\n  }\n\n  function botsList (botsArray) {\n    return botsArray.map(bot => <BotCard key={bot.id} bot={bot} handleBotActionClick={handleBotActionClick} /> )\n  }\n\n  return (\n    <div>\n      <YourBotArmy botsListed={botsList(botsListed)} />\n      {showSortBar ? <SortBar handleSortAction={handleSortAction}/> : <div></div>}\n      {showBotSpecs ? <BotSpecs bot={showBotSpecs} handleBotActionClick={handleBotActionClick} alreadyListedBot={alreadyListedBot(showBotSpecs)} /> : <BotCollection filteredBots={botsList(filteredBots)} />}\n    </div>\n  )\n}\n\nexport default BotsPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}